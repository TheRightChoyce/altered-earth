/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IExquisiteGraphics {
  export type HeaderStruct = {
    version: PromiseOrValue<BigNumberish>;
    width: PromiseOrValue<BigNumberish>;
    height: PromiseOrValue<BigNumberish>;
    numColors: PromiseOrValue<BigNumberish>;
    backgroundColorIndex: PromiseOrValue<BigNumberish>;
    scale: PromiseOrValue<BigNumberish>;
    reserved: PromiseOrValue<BigNumberish>;
    alpha: PromiseOrValue<boolean>;
    hasBackground: PromiseOrValue<boolean>;
    totalPixels: PromiseOrValue<BigNumberish>;
    bitsPerPixel: PromiseOrValue<BigNumberish>;
    pixelsPerByte: PromiseOrValue<BigNumberish>;
    paletteStart: PromiseOrValue<BigNumberish>;
    dataStart: PromiseOrValue<BigNumberish>;
  };

  export type HeaderStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    number,
    number,
    number,
    number,
    number
  ] & {
    version: number;
    width: number;
    height: number;
    numColors: number;
    backgroundColorIndex: number;
    scale: number;
    reserved: number;
    alpha: boolean;
    hasBackground: boolean;
    totalPixels: number;
    bitsPerPixel: number;
    pixelsPerByte: number;
    paletteStart: number;
    dataStart: number;
  };

  export type DrawContextStruct = {
    data: PromiseOrValue<BytesLike>;
    header: IExquisiteGraphics.HeaderStruct;
    palette: PromiseOrValue<string>[];
    pixels: PromiseOrValue<BigNumberish>[];
  };

  export type DrawContextStructOutput = [
    string,
    IExquisiteGraphics.HeaderStructOutput,
    string[],
    number[]
  ] & {
    data: string;
    header: IExquisiteGraphics.HeaderStructOutput;
    palette: string[];
    pixels: number[];
  };
}

export interface IExquisiteGraphicsInterface extends utils.Interface {
  functions: {
    "decodeDrawContext(bytes)": FunctionFragment;
    "decodeHeader(bytes)": FunctionFragment;
    "decodePalette(bytes)": FunctionFragment;
    "draw(bytes)": FunctionFragment;
    "drawPixels(bytes)": FunctionFragment;
    "drawPixelsUnsafe(bytes)": FunctionFragment;
    "drawUnsafe(bytes)": FunctionFragment;
    "ty()": FunctionFragment;
    "ty(string)": FunctionFragment;
    "validate(bytes)": FunctionFragment;
    "validateHeader(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decodeDrawContext"
      | "decodeHeader"
      | "decodePalette"
      | "draw"
      | "drawPixels"
      | "drawPixelsUnsafe"
      | "drawUnsafe"
      | "ty()"
      | "ty(string)"
      | "validate"
      | "validateHeader"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeDrawContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeHeader",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePalette",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "draw",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawPixels",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawPixelsUnsafe",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawUnsafe",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "ty()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ty(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateHeader",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeDrawContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawPixels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawPixelsUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawUnsafe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ty()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ty(string)", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateHeader",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExquisiteGraphics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExquisiteGraphicsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeDrawContext(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IExquisiteGraphics.DrawContextStructOutput] & {
        ctx: IExquisiteGraphics.DrawContextStructOutput;
      }
    >;

    decodeHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IExquisiteGraphics.HeaderStructOutput]>;

    decodePalette(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    draw(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    drawPixels(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    drawPixelsUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    drawUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ty()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "ty(string)"(
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validate(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  decodeDrawContext(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IExquisiteGraphics.DrawContextStructOutput>;

  decodeHeader(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IExquisiteGraphics.HeaderStructOutput>;

  decodePalette(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  draw(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  drawPixels(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  drawPixelsUnsafe(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  drawUnsafe(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ty()"(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "ty(string)"(
    message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validate(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateHeader(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    decodeDrawContext(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IExquisiteGraphics.DrawContextStructOutput>;

    decodeHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IExquisiteGraphics.HeaderStructOutput>;

    decodePalette(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    draw(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    drawPixels(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    drawPixelsUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    drawUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ty()"(overrides?: CallOverrides): Promise<void>;

    "ty(string)"(
      message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    decodeDrawContext(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodePalette(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draw(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawPixels(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawPixelsUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ty()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "ty(string)"(
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validate(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeDrawContext(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodePalette(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draw(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawPixels(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawPixelsUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawUnsafe(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ty()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "ty(string)"(
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateHeader(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
